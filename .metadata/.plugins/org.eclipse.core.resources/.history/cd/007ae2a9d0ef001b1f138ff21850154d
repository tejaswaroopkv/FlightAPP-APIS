package com.fightbook.adminManager.repository;

import java.io.Serializable;

import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.fightbook.adminManager.Entity.Airline;
import com.fightbook.adminManager.Entity.Coupon;
import com.fightbook.adminManager.Entity.FlightCode;
import com.fightbook.adminManager.Entity.ScheduleFlight;
import com.fightbook.adminManager.Exception.FlightBookingException;
import com.fightbook.adminManager.dto.AirlineDTO;
import com.fightbook.adminManager.dto.ScheduleFlightDTO;

@Repository
public class AdminDAOImpl extends BaseRepository implements AdminDAO {
	//private static final ExtLogger log = ExtLogger.create(AdminDAOImpl.class);

	@Override
	public <T extends Serializable> T save(T entity) {
		try {
			return this.saveEntity(entity);
		}catch(Exception e) {
			//log.error("Error in SAVING Data "+ entity.toString());
			return null;
		}
	}

	@Override
	public Airline getAirlineByName(String airlineName) throws FlightBookingException {
		Query query=null;	
		try{
			query = entityManager.createQuery(
				"select al from Airline al where al.airlineName = '" + airlineName +"\'" );
			return query.getResultList()!=null&&query.getResultList().size()!=0&&!query.getResultList().isEmpty()?(Airline)query.getSingleResult():null;
		}catch(Exception e) {
			//log.error("Error in getLevelModuleByModuleId() method ", e);
			throw new FlightBookingException("Something went wrong");
		}
		
	
	}

	@Override
	public Coupon getCouponByCode(String couponCode) throws FlightBookingException {
		Query query=null;	
		try{
			query = entityManager.createQuery(
				"select c from Coupon c where c.couponCode = '" + couponCode +"\'" );
			return query.getResultList()!=null&&query.getResultList().size()!=0&&!query.getResultList().isEmpty()?(Coupon)query.getSingleResult():null;
		}catch(Exception e) {
			//log.error("Error in getLevelModuleByModuleId() method ", e);
			throw new FlightBookingException("Something went wrong");
		}
	}

	@Override
	public ScheduleFlight findFlightScheduledAlready(ScheduleFlightDTO scheduleFlightDTO) {
		Query query=null;
		Integer srcid = scheduleFlightDTO.getSrcid();
		Integer destid = scheduleFlightDTO.getDestid();
		Integer flightCodeId=scheduleFlightDTO.getFlightCodeId();
		Integer airlineId= scheduleFlightDTO.getAirlineId();
		Boolean isAvailable = scheduleFlightDTO.getIsAvailable();
		String depDate = scheduleFlightDTO.getDepatureDate();
		String returnDate = scheduleFlightDTO.getReturnDate();
		
		query = entityManager.createQuery("select sf from ScheduleFlight sf where sf.srcId=" + srcid + "sf.destid = "+ destid + 
				"sf.flightCodeId =" + flightCodeId + "sf.airlineId = " + airlineId + "sf.departureDate=\'"+ depDate + "\' sf.returnDate=\'"+returnDate + "\' sf.isAvailable =" + isAvailable );		
		
		return query.getResultList()!=null && query.getResultList().size()!=0 && !query.getResultList().isEmpty()?(ScheduleFlight)query.getSingleResult():null ;
	}

	

	

}
