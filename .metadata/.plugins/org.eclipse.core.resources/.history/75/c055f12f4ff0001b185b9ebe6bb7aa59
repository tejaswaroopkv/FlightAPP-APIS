package com.fightbook.adminManager.io;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fightbook.adminManager.Entity.Airline;
import com.fightbook.adminManager.Entity.Coupon;
import com.fightbook.adminManager.Entity.FlightCode;
import com.fightbook.adminManager.Entity.ScheduleFlight;
import com.fightbook.adminManager.Exception.FlightBookingException;
import com.fightbook.adminManager.dto.AirlineDTO;
import com.fightbook.adminManager.dto.CouponDTO;
import com.fightbook.adminManager.dto.ScheduleFlightDTO;
import com.fightbook.adminManager.repository.AdminDAO;
import com.mysql.cj.util.DnsSrv.SrvRecord;

@Service
public class AirlineServiceImpl implements AdminService{
	@Autowired
	private AdminDAO adminDAO;
	@Override
	@Transactional
	public AirlineDTO saveorUpdateAirline(AirlineDTO airlineDTO) throws FlightBookingException  {
		Airline airline = null;
		if(adminDAO.getAirlineByName(airlineDTO.getAirlineName())!=null){
			airline = adminDAO.getAirlineByName(airlineDTO.getAirlineName());
			airlineDTO.setAirlineId(airline.getAirlineId());
		}else{
			airline = new Airline();
			BeanUtils.copyProperties(airlineDTO,airline);
			airline = adminDAO.save(airline);
			airlineDTO.setAirlineId(airline.getAirlineId());
		}
		this.saveorUpdateFlight(airlineDTO,airline.getAirlineId());
		
		return airlineDTO;
	}
	private void saveorUpdateFlight(AirlineDTO airlineDTO,Integer airlineId){
		FlightCode flight = new FlightCode();
		flight.setFlightCode(airlineDTO.getFlightCode());
		flight.setAirlineId(airlineId);
		//BeanUtils.copyProperties(airlineDTO,flight);
		adminDAO.save(flight);
		
	}
	@Override
	@Transactional
	public CouponDTO saveorUpdateCoupon(CouponDTO couponDTO) throws FlightBookingException {
		Coupon coupon =null;
		coupon = adminDAO.getCouponByCode(couponDTO.getCouponCode());
		if(coupon!=null){
			throw new FlightBookingException("Sorry Coupon Code already exist");
		}else{
				coupon = new Coupon();
				BeanUtils.copyProperties(couponDTO,coupon);
				adminDAO.save(coupon);
				couponDTO.setId(coupon.getId());
				return couponDTO;
		}
	}
	@Override
	@Transactional
	public ScheduleFlightDTO saveorUpdateScheduleFlight(ScheduleFlightDTO scheduleFlightDTO) throws FlightBookingException {
		ScheduleFlight scheduleFlight =null;
//		scheduleFlight = adminDAO.findFlightScheduledAlready(scheduleFlightDTO); 
		if(scheduleFlight!=null){
			throw new FlightBookingException("Flight Scheduled Already");		
		}else{
			scheduleFlight =  new ScheduleFlight();
			scheduleFlight.setSrcId(scheduleFlightDTO.getSrcid());
			scheduleFlight.setDesId(scheduleFlightDTO.getDestid());
			scheduleFlight.setFlightCodeId(scheduleFlightDTO.getFlightCodeId());
			scheduleFlight.setPrice(scheduleFlightDTO.getPrice());
			scheduleFlight.setAirlineId(scheduleFlightDTO.getAirlineId());
			scheduleFlight.setIsAvailable(scheduleFlightDTO.getIsAvailable());		
			try {
					DateFormat formatter = new SimpleDateFormat("dd-mm-yyyy"); 
					String convertDate = scheduleFlightDTO.getDepatureDate();
					Date departureDate = (Date)formatter.parse(convertDate);
					convertDate = scheduleFlightDTO.getReturnDate();
					Date returnDate = (Date)formatter.parse(convertDate);
					scheduleFlight.setDepartureDate(departureDate);
					scheduleFlight.setReturnDate(returnDate);
					scheduleFlight = adminDAO.save(scheduleFlight);
					//scheduleFlight.getCreatedDate()
					//if(scheduleFlightDTO.getReturnDate()!="")//need to check this condition while saving passengerinfo
					//and also booking-component value="" in html			
				} catch (ParseException e) {
						throw new FlightBookingException("Sorry Something went wrong");
				}
			return scheduleFlightDTO;
		}
	}

}
